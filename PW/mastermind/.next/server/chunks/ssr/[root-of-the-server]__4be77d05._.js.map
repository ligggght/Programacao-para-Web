{"version":3,"sources":["turbopack:///[project]/node_modules/next/src/server/route-modules/app-page/module.compiled.js","turbopack:///[project]/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.ts","turbopack:///[project]/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react.ts","turbopack:///[project]/src/components/game/Game.tsx","turbopack:///[project]/src/consts/consts.ts","turbopack:///[project]/src/components/game/Peg.tsx","turbopack:///[project]/src/components/game/FeedbackPeg.tsx","turbopack:///[project]/src/components/game/FeedbackSelector.tsx","turbopack:///[project]/src/components/game/SetupGame.tsx","turbopack:///[project]/src/components/game/Board.tsx","turbopack:///[project]/src/components/game/Bot.tsx","turbopack:///[project]/src/app/teste/page.tsx"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/app-page/module.js')\n} else {\n  if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.prod.js')\n      }\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.prod.js')\n      }\n    }\n  }\n}\n","module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.ReactJsxRuntime\n","module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.React\n","// TODO: integração com o front dos envios passados\n\n'use client';\nimport React, { useEffect, useState, useMemo } from 'react';\nimport Board from './Board';\nimport SetupGame from './SetupGame';\nimport { EasyMastermindBot } from './Bot';\nimport { MAX_TURNS } from '@/consts/consts';\nimport type { RowType, FeedbackType, PegColor } from '@/types/global';\n\nexport default function Game() {\n  const [rows, setRows] = useState<RowType[]>([]);\n  const [guessingRow, setGuessingRow] = useState<RowType>({\n    pegs: ['default', 'default', 'default', 'default'],\n    feedback: ['empty', 'empty', 'empty', 'empty'],\n  });\n\n  // Booleano que indica a fase do jogo (adivinhando ou dando feedback)\n  const [awaitingFeedback, setAwaitingFeedback] = useState<boolean>(false);\n  const [editingFeedback, setEditingFeedback] = useState<FeedbackType[]>([\n    'empty',\n    'empty',\n    'empty',\n    'empty',\n  ]);\n  const [secretCode, setSecretCode] = useState<PegColor[]>([\n    'default',\n    'default',\n    'default',\n    'default',\n  ]);\n\n  const [canSubmitFeedback, setCanSubmitFeedback] = useState(false);\n  const [canSubmitGuess, setCanSubmitGuess] = useState(false);\n  const [canSubmitGameSetup, setCanSubmitGameSetup] = useState(false);\n\n  const [passwordGuessed, setPasswordGuessed] = useState(false);\n\n  const [gameSettedUp, setGameSettedUp] = useState(false);\n\n  const [isBotPlaying, setIsBotPlaying] = useState(false);\n  const [isBotGuessing, setIsBotGuessing] = useState(false);\n  const bot = useMemo(() => new EasyMastermindBot(isBotGuessing), [isBotGuessing]);\n\n  // Bot começa jogando e precisa gerar o código secreto\n  useEffect(() => {\n    if (isBotPlaying && !isBotGuessing) {\n      setSecretCode(bot.generateRandomPassword());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isBotPlaying]);\n\n  // Bot avalia se deve jogar ou dar feedback (se for sua vez)\n  useEffect(() => {\n    if (!isBotPlaying || passwordGuessed) return;\n\n    if (!isBotGuessing && awaitingFeedback) {\n      setTimeout(() => {\n        addFeedback(bot.giveFeedback(rows[rows.length - 1].pegs), rows.length - 1);\n      }, 500);\n    }\n\n    if (isBotGuessing && !awaitingFeedback) {\n      setTimeout(() => {\n        addGuess({ pegs: bot.makeGuess(rows), feedback: ['empty', 'empty', 'empty', 'empty'] });\n      }, 500);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [rows, isBotPlaying]);\n\n  function addGuess(newGuess: RowType) {\n    setRows((rows) => {\n      const updatedRows: RowType[] = [...rows, newGuess];\n      return updatedRows;\n    });\n\n    setGuessingRow({\n      pegs: ['default', 'default', 'default', 'default'],\n      feedback: ['empty', 'empty', 'empty', 'empty'],\n    });\n    setEditingFeedback(['empty', 'empty', 'empty', 'empty']);\n    setAwaitingFeedback(true);\n  }\n\n  function addFeedback(newFeedback: FeedbackType[], guessIndex: number) {\n    setRows((rows) => [\n      ...rows.slice(0, guessIndex),\n      { ...rows[guessIndex], feedback: newFeedback },\n      ...rows.slice(guessIndex + 1),\n    ]);\n    setEditingFeedback(['empty', 'empty', 'empty', 'empty']);\n    setAwaitingFeedback(false);\n    if (newFeedback.every((fb) => fb === 'correct')) {\n      setPasswordGuessed(true);\n    }\n  }\n\n  // Verifica condições de fim de jogo ---------------------\n\n  useEffect(() => {\n    if (passwordGuessed) {\n      alert('Parabéns! Você adivinhou o código secreto!');\n      // Reiniciar o jogo\n      setRows([]);\n      setGuessingRow({\n        pegs: ['default', 'default', 'default', 'default'],\n        feedback: ['empty', 'empty', 'empty', 'empty'],\n      });\n      setAwaitingFeedback(false);\n      setEditingFeedback(['empty', 'empty', 'empty', 'empty']);\n      setSecretCode(['default', 'default', 'default', 'default']);\n      setPasswordGuessed(false);\n      setGameSettedUp(false);\n      setIsBotGuessing(false);\n      setIsBotPlaying(false);\n    }\n  }, [passwordGuessed]);\n\n  useEffect(() => {\n    if (rows.length >= MAX_TURNS && !passwordGuessed) {\n      alert('Fim de jogo! Você atingiu o número máximo de tentativas.');\n      // Reiniciar o jogo\n      setRows([]);\n      setGuessingRow({\n        pegs: ['default', 'default', 'default', 'default'],\n        feedback: ['empty', 'empty', 'empty', 'empty'],\n      });\n      setAwaitingFeedback(false);\n      setEditingFeedback(['empty', 'empty', 'empty', 'empty']);\n      setSecretCode(['default', 'default', 'default', 'default']);\n      setPasswordGuessed(false);\n      setGameSettedUp(false);\n      setIsBotGuessing(false);\n      setIsBotPlaying(false);\n    }\n  }, [rows, passwordGuessed]);\n\n  // ------------------------------------------------------------------\n\n  // Habilitam ou desabilitam os botões de submissão ---------------------\n  useEffect(() => {\n    setCanSubmitGuess(guessingRow.pegs.every((c) => c !== 'default'));\n  }, [guessingRow]);\n\n  useEffect(() => {\n    setCanSubmitFeedback(editingFeedback.every((c) => c !== 'empty'));\n  }, [editingFeedback]);\n\n  useEffect(() => {\n    setCanSubmitGameSetup(secretCode.every((c) => c !== 'default'));\n  }, [secretCode]);\n\n  // --------------------------------------------------------------------\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center gap-4 bg-[#16213e] p-6\">\n      <h2 className=\"text-white text-2xl font-bold\">Mastermind</h2>\n      {!gameSettedUp && (\n        <>\n          <SetupGame secretCode={secretCode} setSecretCode={setSecretCode} />\n          {/* TODO: mover para SetupGame os botoes abaixo */}\n          <button\n            onClick={() => {\n              setIsBotPlaying(true);\n              setIsBotGuessing(false);\n              setGameSettedUp(true);\n            }}\n            className=\"px-4 py-2 bg-purple-500 hover:bg-purple-400 text-white font-semibold rounded\"\n          >\n            Bot Gera o Código Secreto\n          </button>\n          {/* apenas aparece se a senha secreta já estar configurada */}\n          {canSubmitGameSetup && (\n            <button\n              onClick={() => {\n                setIsBotPlaying(true);\n                setIsBotGuessing(true);\n                setGameSettedUp(true);\n              }}\n              className=\"px-4 py-2 bg-purple-500 hover:bg-purple-400 text-white font-semibold rounded\"\n            >\n              Bot Adivinha o Código Secreto\n            </button>\n          )}\n        </>\n      )}\n      {gameSettedUp && (\n        <Board\n          rows={rows}\n          guessingRow={guessingRow}\n          setGuessingRow={setGuessingRow}\n          editingFeedback={editingFeedback}\n          setEditingFeedback={setEditingFeedback}\n          awaitingFeedback={awaitingFeedback}\n          secretCode={secretCode}\n        />\n      )}\n\n      {!gameSettedUp && (\n        <button\n          onClick={() => setGameSettedUp(true)}\n          disabled={!canSubmitGameSetup}\n          className=\"px-4 py-2 bg-blue-500 hover:bg-blue-400 text-white font-semibold rounded\"\n        >\n          Iniciar Jogo\n        </button>\n      )}\n      {gameSettedUp && !awaitingFeedback && (\n        <button\n          onClick={() => {\n            addGuess({\n              pegs: guessingRow.pegs,\n              feedback: ['empty', 'empty', 'empty', 'empty'],\n            });\n          }}\n          disabled={!canSubmitGuess}\n          className=\"px-4 py-2 bg-cyan-500 hover:bg-cyan-400 text-white font-semibold rounded\"\n        >\n          Submeter Jogada\n        </button>\n      )}\n\n      {gameSettedUp && awaitingFeedback && (\n        <button\n          onClick={() => {\n            addFeedback(editingFeedback, rows.length - 1);\n          }}\n          disabled={!canSubmitFeedback}\n          className=\"px-4 py-2 bg-green-500 hover:bg-green-400 text-white font-semibold rounded\"\n        >\n          Submeter Feedback\n        </button>\n      )}\n    </div>\n  );\n}\n","import type { PegColor } from '../types/global';\n\nexport const PEG_COLORS: PegColor[] = ['vermelho', 'azul', 'verde', 'amarelo', 'roxo', 'laranja'];\n\nexport const MAX_TURNS = 12;","'use client';\nimport React, { useState, useRef, useEffect } from 'react';\nimport { PEG_COLORS } from '../../consts/consts';\nimport type { PegColor } from '../../types/global';\n\ntype PegProps = {\n  color: PegColor;\n  enabled: boolean;\n  onChange?: (color: PegColor) => void;\n};\n\nexport default function Peg({ color, onChange, enabled = true }: PegProps) {\n  const [showMenu, setShowMenu] = useState(false);\n  const menuRef = useRef<HTMLDivElement | null>(null);\n\n  // Fecha o menu se clicar fora dele\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        setShowMenu(false);\n      }\n    }\n\n    if (showMenu) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [showMenu]);\n\n  return (\n    <div style={{ position: 'relative', display: 'inline-block' }}>\n      <div\n        className={`peg peg-${color}`}\n        onClick={enabled ? () => setShowMenu(true) : undefined}\n        style={{ cursor: !color ? 'pointer' : 'default' }}\n      >\n        {!color && ''}\n      </div>\n      {showMenu && onChange && (\n        <div\n          ref={menuRef}\n          style={{\n            position: 'absolute',\n            top: '110%',\n            left: '50%',\n            transform: 'translateX(-50%)',\n            background: '#222',\n            border: '2px solid #00d4ff',\n            borderRadius: '8px',\n            padding: '0.5rem',\n            zIndex: 10,\n            display: 'flex',\n            gap: '0.5rem',\n          }}\n        >\n          {PEG_COLORS.map((c) => (\n            <button\n              key={c}\n              className={`peg-${c}`}\n              style={{\n                width: 30,\n                height: 30,\n                borderRadius: '50%',\n                border: 'none',\n                cursor: 'pointer',\n              }}\n              onClick={() => {\n                onChange(c);\n                setShowMenu(false);\n              }}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","'use client';\nimport { useState, useRef, useEffect } from 'react';\nimport type { FeedbackPegProps, FeedbackType } from '../../types/global';\n\nconst FEEDBACK_OPTIONS: FeedbackType[] = ['correct', 'wrong-position', 'wrong'];\n\nexport default function FeedbackPeg({ type, onChange }: FeedbackPegProps) {\n  const [showMenu, setShowMenu] = useState(false);\n  const menuRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        setShowMenu(false);\n      }\n    }\n    if (showMenu) document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [showMenu]);\n\n  return (\n    <div className=\"relative inline-block \">\n      {/* Bolinha principal */}\n      <div\n        className={`w-5 h-5 rounded-full cursor-pointer feedback-${type}`}\n        onClick={() => setShowMenu(true)}\n      />\n\n      {/* Menu dropdown */}\n      {showMenu && (\n        <div\n          ref={menuRef}\n          className=\"absolute top-full left-1/2 -translate-x-1/2 mt-2 flex gap-2 p-2 bg-gray-900 border-2 border-cyan-500 rounded-lg z-10\"\n        >\n          {FEEDBACK_OPTIONS.map((type) => (\n            <button\n              key={type}\n              className={`w-5 h-5 rounded-full feedback-${type}`}\n              onClick={() => {\n                onChange(type);\n                setShowMenu(false);\n              }}\n              title={type}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","import FeedbackPeg from './FeedbackPeg';\nimport type { FeedbackType } from '../../types/global';\n\ntype FeedbackSelectorProps = {\n  feedback: FeedbackType[];\n  onChange: (newFeedback: FeedbackType[]) => void;\n};\n\nexport default function FeedbackSelector({ feedback, onChange }: FeedbackSelectorProps) {\n  function handleChange(idx: number, type: FeedbackType) {\n    const newFeedback = [...feedback];\n    newFeedback[idx] = type;\n    onChange(newFeedback);\n  }\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      {feedback.map((type, idx) => {\n        return (\n          <FeedbackPeg\n            key={idx}\n            type={type}\n            onChange={(selection) => {\n              handleChange(idx, selection);\n            }}\n          />\n        );\n      })}\n    </div>\n  );\n}\n","import Peg from './Peg';\nimport type { SetupGameProps } from '../../types/global';\n\nexport default function SetupGame({ secretCode, setSecretCode, enabled = true }: SetupGameProps) {\n  return (\n    <>\n      {enabled ? (\n        <h3 className=\"text-white text-lg font-bold\">Configure o Código Secreto</h3>\n      ) : (\n        <h3 className=\"text-white text-lg font-bold\">Código Secreto: </h3>\n      )}\n      <div className=\"grid grid-cols-4 gap-2 mb-4 items-center\">\n        {secretCode.map((color, pegIdx) => (\n          <Peg\n            key={pegIdx}\n            color={color}\n            enabled={enabled}\n            onChange={(newColor) => {\n              const newPegs = [...secretCode];\n              newPegs[pegIdx] = newColor;\n              setSecretCode(newPegs);\n            }}\n          />\n        ))}\n      </div>\n    </>\n  );\n}\n","import Peg from './Peg';\nimport FeedbackSelector from './FeedbackSelector';\nimport SetupGame from './SetupGame';\nimport type { BoardProps } from '../../types/global';\n\nexport default function Board({\n  rows,\n  guessingRow,\n  setGuessingRow,\n  editingFeedback,\n  setEditingFeedback,\n  awaitingFeedback,\n  secretCode,\n}: BoardProps) {\n  return (\n    <div className=\"flex flex-col items-center bg-[#16213e] p-6 border-[3px] border-[#00d4ff] relative shadow-[0_0_15px_#00d4ff,inset_0_0_15px_rgba(0,212,255,0.2)] w-full max-w-md\">\n      {/* Rows jogadas */}\n      {rows.map((row, idx) => (\n        <div key={idx} className=\"grid grid-cols-4 gap-4 items-center\">\n          {row.pegs.map((color, pegIdx) => (\n            <Peg key={pegIdx} color={color} enabled={false} />\n          ))}\n          <div className=\"grid grid-cols-2 gap-1\">\n            {row.feedback.map((type, fbIdx) => (\n              <div key={fbIdx} className={`feedback-peg feedback-${type}`}></div>\n            ))}\n          </div>\n        </div>\n      ))}\n\n      {/* Linha de adivinhação atual */}\n      <div className=\"grid grid-cols-4 gap-2 mb-4 items-center\">\n        {!awaitingFeedback &&\n          guessingRow.pegs.map((color, pegIdx) => (\n            <Peg\n              key={pegIdx}\n              color={color}\n              enabled={!awaitingFeedback}\n              onChange={(newColor) => {\n                const newPegs = [...guessingRow.pegs];\n                newPegs[pegIdx] = newColor;\n                setGuessingRow({ ...guessingRow, pegs: newPegs });\n              }}\n            />\n          ))}\n\n        <div className=\"grid grid-cols-4 gap-1 col-start-2 col-span-2 items-center justify-center\">\n          {awaitingFeedback && (\n            <>\n              <FeedbackSelector\n                feedback={editingFeedback}\n                onChange={(newFeedback) => setEditingFeedback(newFeedback)}\n              />\n            </>\n          )}\n        </div>\n      </div>\n      {awaitingFeedback && (\n        <>\n          {/* Mostra o código secreto quando estiver aguardando feedback */}\n          <SetupGame secretCode={secretCode} setSecretCode={() => {}} enabled={false} />\n        </>\n      )}\n    </div>\n  );\n}\n","// Acredito que usar uma classe (para ter diferentes dificuldades instanciadas) seja mais interessante do que usar apenas funções\n\nimport { PEG_COLORS } from '@/consts/consts';\nimport type { RowType, FeedbackType, PegColor } from '@/types/global';\n\nexport class EasyMastermindBot {\n  isGuessing: boolean;\n  secretCode: PegColor[] = [];\n\n  constructor(isGuessing: boolean) {\n    // Inicialização do bot\n    this.isGuessing = isGuessing;\n  }\n\n  makeGuess(previousGuesses: RowType[]): PegColor[] {\n    if (previousGuesses.length === 0) {\n      // Primeira jogada, chute aleatório\n      return this.getRandomGuess();\n    }\n    const lastGuess = previousGuesses[previousGuesses.length - 1];\n    const correctNumber = lastGuess.feedback.reduce(\n      (acc, fb) => acc + (fb === 'correct' ? 1 : 0),\n      0,\n    );\n\n    // um switch case com casos iguais para que no futuro possamos criar novas estratégias\n    switch (correctNumber) {\n      case 0:\n        return this.getRandomGuess();\n      case 1:\n        return this.keepCorrectNumber(lastGuess, correctNumber);\n      case 2:\n        return this.keepCorrectNumber(lastGuess, correctNumber);\n      case 3:\n        return this.keepCorrectNumber(lastGuess, correctNumber);\n      case 4:\n        console.log('não deveria chegar aqui');\n        // Acertou o código\n        return lastGuess.pegs;\n      default:\n        return this.getRandomGuess();\n    }\n  }\n\n  getRandomGuess(): PegColor[] {\n    const availableColors = PEG_COLORS;\n    const guess: PegColor[] = [];\n    while (guess.length < 4) {\n      const randomColor = availableColors[Math.floor(Math.random() * availableColors.length)];\n      guess.push(randomColor);\n    }\n    return guess;\n  }\n\n  // Se acertou 3, mantem 3 e aleatoriza uma cor, apenas observa a ultima jogada\n  keepCorrectNumber(lastGuess: RowType, correctToKeep: number): PegColor[] {\n    const newGuess: PegColor[] = [...lastGuess.pegs]\n      .sort(() => 0.5 - Math.random())\n      .slice(0, correctToKeep);\n\n    const availableColors = PEG_COLORS;\n    while (newGuess.length < 4) {\n      const randomColor = availableColors[Math.floor(Math.random() * availableColors.length)];\n      newGuess.push(randomColor);\n    }\n    return newGuess;\n  }\n\n  generateRandomPassword(): PegColor[] {\n    this.secretCode = this.getRandomGuess();\n    return this.secretCode;\n  }\n\n  giveFeedback(lastGuessPegs: PegColor[]): FeedbackType[] {\n    const feedback: FeedbackType[] = Array(4).fill('wrong');\n\n    // Para que casos como:\n    // Segredo: [vermelho, azul, verde, amarelo]\n    // Chute:   [vermelho, vermelho, azul, roxo]\n    // Não retornem 1 \"correct\" e 1 \"wrong-position\" para os vermelhos,\n    // mas sim 1 \"correct\" e 1 \"wrong\"\n    // Precisamos marcar quais posições já foram usadas para feedback\n    const secretUsed = Array(4).fill(false);\n    const guessUsed = Array(4).fill(false);\n\n    // 1ª passada: marcar \"correct\"\n    for (let i = 0; i < 4; i++) {\n      if (lastGuessPegs[i] === this.secretCode[i]) {\n        feedback[i] = 'correct';\n        secretUsed[i] = true;\n        guessUsed[i] = true;\n      }\n    }\n\n    // 2ª passada: marcar \"wrong-position\"\n    for (let i = 0; i < 4; i++) {\n      if (!guessUsed[i]) {\n        for (let j = 0; j < 4; j++) {\n          if (!secretUsed[j] && lastGuessPegs[i] === this.secretCode[j]) {\n            feedback[i] = 'wrong-position';\n            secretUsed[j] = true;\n            guessUsed[i] = true;\n            break;\n          }\n        }\n      }\n    }\n\n    // Embaralhar o feedback para não dar pistas sobre a posição\n    return feedback.sort(() => Math.random() - 0.5);\n  }\n}\n","'use client';\nimport Game from '@/components/game/Game';\n\nexport default function Teste() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-900\">\n      <Game />\n    </div>\n  );\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","__NEXT_EXPERIMENTAL_REACT","NODE_ENV","TURBOPACK","vendored","ReactJsxRuntime","React"],"mappings":"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","ignoreList":[0,1,2]}